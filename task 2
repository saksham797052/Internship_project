from PIL import Image
import os

def encrypt_decrypt_image(image_path, output_path, key=50, mode='encrypt'):
    """
    Encrypts or decrypts an image using pixel manipulation.

    Args:
        image_path (str): Path to the input image.
        output_path (str): Path to save the output (encrypted/decrypted) image.
        key (int): An integer key for mathematical operations (0-255).
        mode (str): 'encrypt' or 'decrypt'.
    """
    try:
        img = Image.open(image_path)
        img = img.convert("RGB") # Ensure image is in RGB format

        width, height = img.size
        pixels = img.load() # Load pixel data

        for y in range(height):
            for x in range(width):
                r, g, b = pixels[x, y]

                # --- Operation 1: Simple Mathematical Operation (Adding/Subtracting Key) ---
                if mode == 'encrypt':
                    # Add key, then modulo 256 to keep within 0-255 range
                    r = (r + key) % 256
                    g = (g + key) % 256
                    b = (b + key) % 256
                elif mode == 'decrypt':
                    # Subtract key, then modulo 256. Python's % handles negative results
                    # correctly for positive divisors, but adding 256 before modulo
                    # ensures positive results if subtraction leads to negative.
                    r = (r - key + 256) % 256
                    g = (g - key + 256) % 256
                    b = (b - key + 256) % 256

                # --- Operation 2: Swapping R and B Channels ---
                # Apply this operation for both encryption and decryption
                # (since swapping twice returns to original)
                r_temp = r
                r = b
                b = r_temp

                pixels[x, y] = (r, g, b)

        img.save(output_path)
        print(f"Image {mode}ed successfully! Saved to: {output_path}")

    except FileNotFoundError:
        print(f"Error: Image not found at {image_path}")
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    input_image_name = "input_image.png" # Make sure you have an image with this name in the same directory
    encrypted_image_name = "encrypted_image.png"
    decrypted_image_name = "decrypted_image.png"
    encryption_key = 123 # Choose a key between 0 and 255

    # Create a dummy image for testing if it doesn't exist
    if not os.path.exists(input_image_name):
        try:
            dummy_img = Image.new('RGB', (100, 100), color = 'red')
            dummy_img.save(input_image_name)
            print(f"Created a dummy image: {input_image_name} for testing.")
        except Exception as e:
            print(f"Could not create a dummy image. Please place '{input_image_name}' in the same directory. Error: {e}")
            exit()


    print(f"\n--- Encrypting {input_image_name} ---")
    encrypt_decrypt_image(input_image_name, encrypted_image_name, encryption_key, mode='encrypt')

    print(f"\n--- Decrypting {encrypted_image_name} ---")
    encrypt_decrypt_image(encrypted_image_name, decrypted_image_name, encryption_key, mode='decrypt')

    print("\n--- Verification ---")
    print(f"Check '{encrypted_image_name}' for the encrypted image.")
    print(f"Check '{decrypted_image_name}' to see if it matches '{input_image_name}'.")
    print("If they look the same, decryption was successful!")
